function addmodule {
	addmodulewithpath "usb-modboot" $1 $2
}

function addmodulewithpath {
	set path="$1"
	set file="$2"
	if [ -f "/$path/$file.module.tar" -o -f "/$path/$file.module.cfg" -o -f "/$path/$file.module.inc" ]; then
		return 0
	fi
	set LABEL=
	if [ -f "/$path/$file.ini" ]; then
		source "/$path/$file.ini"
	fi
	if [ -n "$3" ]; then
		set LABEL="$3"
	fi
	set menulabel="$LABEL"
	if [ -z "$menulabel" ] ; then
		set menulabel="$file"
		if regexp -s 1:innerlabel '\[(.*)\]' "$menulabel"; then
			set menulabel="$innerlabel"
		fi
	fi
	if [ -d "/$path/$file" ]; then
		if [ -f "/$path/$file/grub.cfg" ]; then
			menuentry "$menulabel" "$file" "$path" {
				set MODULE_PATH="/$3/$2"
				export MODULE_PATH
				configfile "$MODULE_PATH/grub.cfg"
			}
		elif [ -f "/$path/$file/grub.inc" ]; then
			set MODULE_PATH="/$path/$file"
			export MODULE_PATH
			source "$MODULE_PATH/grub.inc"
		else
			submenu "$menulabel" "$file" "$path" {
				for subpath in /$3/$2/*; do
					regexp -s 1:subfile '.*/(.*)' "$subpath"
					addmodulewithpath "$3/$2" "$subfile"
				done
			}
		fi
	elif regexp '^(.*)\.[Ii][Ss][Oo]$' "$file"; then
		loopback mod "/$path/$file"
		if [ -f (mod)/.disk/info -a -z "$LABEL" ]; then
			bqcat (mod)/.disk/info menulabel
		fi
		if [ -f (mod)/boot/grub/loopback.cfg ]; then
			menuentry "$menulabel" "$file" "$path" {
				set iso_path="/$3/$2"
				export iso_path
				loopback loopdev_cfg "${iso_path}"
				set orig_root="$root"
				set root=(loopdev_cfg)
				configfile /boot/grub/loopback.cfg
				loopback -d loopdev_cfg
				set root="$orig_root"
				terminal_output $terminal
			}
		else
			echo $"Skipping unsupported ISO module: ${file}"
		fi
		loopback -d mod
	elif regexp '^(.*)\.[Ll][Kk][Rr][Nn]$' "$file"; then
		if [ "$grub_platform" = "pc" ]; then
			menuentry "$menulabel" "$file" "$path" {
				linux16 "/$3/$2"
			}
		fi
	elif regexp '^(.*)\.[Bb][Ii][Nn]$' "$file"; then
		if [ "$grub_platform" = "pc" ]; then
			menuentry "$menulabel" "$file" "$path" {
				linux16 "/$3/$2"
			}
		fi
	elif regexp '^(.*)\.[Cc][Ff][Gg]$' "$file"; then
		menuentry "$menulabel" "$file" "$path" {
			set MODULE_PATH="/$3/$2"
			export MODULE_PATH
			configfile "$MODULE_PATH"
		}
	elif regexp '^(.*)\.[Ii][Nn][Cc]$' "$file"; then
		source "/$path/$file"
	elif regexp '^(.*)\.[Ii][Mm][Gg]$' "$file"; then
		if [ "$grub_platform" = "pc" ]; then
			menuentry "$menulabel" "$file" "$path" {
				linux16 (core)/boot/grub/memdisk
				initrd16 "/$3/$2"
			}
		fi
	elif regexp '^(.*)\.[Ee][Ff][Ii]$' "$file"; then
		if [ "$grub_platform" = "efi" -a "$grub_cpu" = "x86_64" ]; then
			menuentry "$menulabel" "$file" "$path" {
				chainloader "/$3/$2"
			}
		fi
	elif regexp '^(.*)\.[Ee][Ff][Ii]32$' "$file"; then
		if [ "$grub_platform" = "efi" -a "$grub_cpu" = "i386" ]; then
			menuentry "$menulabel" "$file" "$path" {
				chainloader "/$3/$2"
			}
		fi
	elif regexp '^(.*)\.[Tt][Aa][Rr]$' "$file"; then
		menuentry "$menulabel" "$file" "$path" {
			set MODULE_PATH="/$3/$2"
			export MODULE_PATH
			loopback mod "$MODULE_PATH"
			configfile "(mod)/grub.cfg"
			loopback -d mod
		}
	elif regexp '^.*\.[Ii][Nn][Ii]$' "$file"; then
		true # skip INI files
	elif [ "$file" == "core-module.dat" ]; then
		true # skip core-module.dat
	else
		echo $"Skipping unsupported module: ${file}"
	fi
}

if [ -z "$incmode" ]; then
	insmod regexp
	set incmode=main
	set lang=en
	set locale_dir=(core)/boot/grub/locale
	set secondary_locale_dir=(core)/boot/grub/locale/usb-modboot
	export lang incmode secondary_locale_dir
fi
if [ "$incmode" = "main" ]; then
if [ "$grub_platform" = "efi" ]; then
	insmod efi_gop
	set FIRMWARE_NAME=UEFI
else
	insmod vbe
	set FIRMWARE_NAME=BIOS
fi
if [ -z "$menu_color_defined"]; then
	set menu_color_normal=light-gray/blue
	set menu_color_highlight=yellow/blue
	set menu_color_defined=1
fi
set gfxmode=auto
set terminal console
set SUPPORTS_64_BIT=
if cpuid -l; then set SUPPORTS_64_BIT=1; fi
export FIRMWARE_NAME menu_color_normal menu_color_highlight menu_color_defined gfxmode terminal SUPPORTS_64_BIT
set default=1

menuentry $"GRUB configuration" {
	set incmode=cfg
	configfile (core)/boot/grub/grub.cfg
	if [ "$incmode" = "cfgafter" ]; then
		set incmode=main
		clear_menu
		source (core)/boot/grub/grub.cfg
	fi
	set incmode=main
}

source /usb-modboot/menu.ini

submenu $"All Boot Modules" {
	for path in /usb-modboot/*; do
		regexp -s 1:file '.*/(.*)' "$path"
		addmodule "$file"
	done
}

menuentry $"Auto-detect operating systems on disk(s)" {
        configfile (core)/boot/grub/osdetect.cfg
}

menuentry $"Exit to ${FIRMWARE_NAME}" {
	insmod minicmd
	loopback -d core
	exit
}

menuentry $"Reboot" {
	reboot
}

menuentry $"Halt" {
	halt
}

elif [ "$incmode" = "cfg" ]; then

	menuentry $"Language" {
		set incmode=lng
		configfile (core)/boot/grub/grub.cfg
		if [ "$incmode" = "reload" ]; then
			set incmode=cfgafter
			pop_env incmode
			set incmode=cfg
			clear_menu
			source (core)/boot/grub/grub.cfg
		else
			set incmode=cfg
		fi
	}

	submenu $"Color Scheme" {
		set default="1"
		menuentry $"Apply current scheme" {
			pop_env menu_color_normal menu_color_highlight
			submenu_exit
		}

		menuentry $"Preview: Default scheme" {
			set menu_color_normal=light-gray/blue
			set menu_color_highlight=yellow/blue
		}

		menuentry $"Preview: Inverted" {
			set menu_color_normal=light-gray/brown
			set menu_color_highlight=light-blue/brown
		}

		menuentry $"Preview: Barlond" {
			set menu_color_normal=white/cyan
			set menu_color_highlight=yellow/blue
		}

		menuentry $"Preview: Barlond2" {
			set menu_color_normal=white/blue
			set menu_color_highlight=yellow/cyan
		}

		menuentry $"Preview: Simple Black" {
			set menu_color_normal=light-gray/black
			set menu_color_highlight=yellow/blue
		}

		menuentry $"Preview: Matrix" {
			set menu_color_normal=green/black
			set menu_color_highlight=light-green/green
		}

		menuentry $"Preview: Dalton Bros." {
			set menu_color_normal=red/green
			set menu_color_highlight=green/red
		}

		menuentry $"Preview: Debian" {
			set menu_color_normal=cyan/blue
			set menu_color_highlight=white/blue
		}

		menuentry $"Preview: BW" {
			set menu_color_normal=light-gray/black
			set menu_color_highlight=black/light-gray
		}

		menuentry $"Preview: BW Inverse" {
			set menu_color_normal=black/light-gray
			set menu_color_highlight=light-gray/black
		}

		menuentry $"Preview: SGD" {
			set menu_color_normal=white/brown
			set menu_color_highlight=white/blue
		}

		menuentry $"Preview: SGD Non Default" {
			set menu_color_normal=black/cyan
			set menu_color_highlight=yellow/black
		}
	}

	submenu $"Keyboard layout" {
		menuentry $"Default ${FIRMWARE_NAME} keyboard layout" {
			terminal_input console
			submenu_exit
		}

		menuentry $"German" {
			terminal_input at_keyboard
			keymap (core)/boot/grub/kbd/de.gkb
			submenu_exit
		}

		menuentry $"Austrian" {
			terminal_input at_keyboard
			keymap (core)/boot/grub/kbd/at.gkb
			submenu_exit
		}

		menuentry $"Swiss" {
			terminal_input at_keyboard
			keymap (core)/boot/grub/kbd/ch.gkb
			submenu_exit
		}

		menuentry $"Spanish" {
			terminal_input at_keyboard
			keymap (core)/boot/grub/kbd/es.gkb
			submenu_exit
		}

		menuentry $"French" {
			terminal_input at_keyboard
			keymap (core)/boot/grub/kbd/fr.gkb
			submenu_exit
		}

		menuentry $"US English" {
			terminal_input at_keyboard
			keymap (core)/boot/grub/kbd/us.gkb
			submenu_exit
		}

		menuentry $"Czech" {
			terminal_input at_keyboard
			keymap (core)/boot/grub/kbd/cz.gkb
			submenu_exit
		}
	}

	submenu $"Graphics resolution" {
		set default="$gfxmode"
		insmod all_video
		bqvideoinfo RESOLUTIONS
		menuentry "auto" {
			set gfxmode=auto
			pop_env gfxmode
			if [ "$terminal" = "gfxterm" ]; then
				terminal_output console
				terminal_output gfxterm
			fi
			submenu_exit
		}
		for res in $RESOLUTIONS; do
			menuentry "$res" {
				set gfxmode=$1
				pop_env gfxmode
				if [ "$terminal" = "gfxterm" ]; then
					terminal_output console
					terminal_output gfxterm
				fi
				submenu_exit
			}
		done
	}

	submenu $"Graphics mode" {
		menuentry $"GRUB: Text, OS: Text" {
			set terminal=console
			terminal_output $terminal
			set gfxpayload=text
			pop_env gfxpayload terminal
			submenu_exit
		}

		menuentry $"GRUB: Text, OS: Selected resolution ($gfxmode)" {
			set terminal=console
			terminal_output $terminal
			set gfxpayload=$gfxmode
			pop_env gfxpayload terminal
			submenu_exit
		}

		menuentry $"GRUB: Graphics, OS: Text" {
			loadfont (core)/boot/grub/fonts/euro.pf2
			insmod all_video
			set terminal=gfxterm
			terminal_output $terminal
			set gfxpayload=text
			pop_env gfxpayload terminal
			submenu_exit
		}

		menuentry $"GRUB: Graphics, OS: Same resolution" {
			loadfont (core)/boot/grub/fonts/euro.pf2
			insmod all_video
			set terminal=gfxterm
			terminal_output $terminal
			set gfxpayload=keep
			pop_env gfxpayload terminal
			submenu_exit
		}

		menuentry $"GRUB: Graphics, OS: Selected resolution ($gfxmode)" {
			loadfont (core)/boot/grub/fonts/euro.pf2
			insmod all_video
			set terminal=gfxterm
			terminal_output $terminal
			set gfxpayload=$gfxmode
			pop_env gfxpayload terminal
			submenu_exit
		}
	}


elif [ "$incmode" = "lng" ]; then
		menuentry $"English" {
			set lang=en
			set incmode=reload
			pop_env lang incmode
			submenu_exit
		}

		menuentry $"German" {
			set lang=de
			set incmode=reload
			pop_env lang incmode
			submenu_exit
		}

fi
